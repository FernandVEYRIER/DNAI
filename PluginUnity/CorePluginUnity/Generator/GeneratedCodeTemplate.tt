<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@parameter type="System.String" name="parameter1" #>
using System;
using UnityEngine;
using UnityEngine.Events;
using CoreCommand;
using System.Collections.Generic;

namespace DNAI.<#=Namespace#>
{
	public class EventOutputChange : EventArgs
	{
		public <#=ClassName#> Invoker;
		public object Value;
		public Type ValueType;
	}

	///<summary>
	/// Base behaviour for DNAI IA.
	///</summary>
	public class <#=ClassName#> : MonoBehaviour
	{
		[Serializable]
		public class UnityEventOutputChange : UnityEvent<EventOutputChange>
		{
		}

		///<summary>
		/// Called when output values of the DNAI script change.
		///</summary>
		public UnityEventOutputChange OnOutputChanged;

		<# foreach (var item in DataTypes)
		{#>
			public <#=item#>
		<# } #>

		//[Header("Input variables")]
		<# foreach (var item in Inputs)
		{ #>
			public <#=item #>;
		<# } #>

		//[Header("Output variables")]
		<# foreach (var item in Outputs)
		{ #>
			private <#=item.Split(' ')[0] #> _<#=item.Split(' ')[1] #>;
			public <#=item #>
			{
				get { return _<#=item.Split(' ')[1] #>; }
				private set
				{
					_<#=item.Split(' ')[1]#> = value;
					OnOutputChanged.Invoke(new EventOutputChange { Value = value, ValueType = value.GetType(), Invoker = this });
				}
			}
		<# } #>

		private BinaryManager _manager;

		public <#=ClassName#>()
		{
			_manager = new BinaryManager();
			_manager.LoadCommandsFrom(@"Assets/Standard Assets/DNAI/Scripts/" + "<#=FilePath#>");
		}

		///<summary>
		/// Executes the Duly Behaviour by calling the created function.
		/// Updates Outputs accordingly.
		///</summary>
		public void Execute()
		{
			var results = new Dictionary<string, dynamic>();

			results = _manager.Controller.CallFunction(<#=FunctionId#>, new Dictionary<string, dynamic>{ <#=FunctionArguments#> });
			<# if (Outputs.Count > 0)
			{
				foreach (var output in Outputs)
				{
					var varName = output.Split(' ')[1]; #>
					<#=varName#> = results["<#=varName#>"];
				<# }
			} #>
		}
	}
}