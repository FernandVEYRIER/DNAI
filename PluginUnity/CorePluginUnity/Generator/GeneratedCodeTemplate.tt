<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@parameter type="System.String" name="parameter1" #>
using UnityEngine;
using CoreCommand;
using System.Collections.Generic;

namespace Duly.<#=Namespace#>
{
	///<summary>
	/// Base behaviour for Duly IA.
	///</summary>
	public class <#=ClassName#> : MonoBehaviour
	{
		<# foreach (var item in DataTypes)
		{#>
			public <#=item#>
		<# } #>

		//[Header("Input variables")]
		<# foreach (var item in Inputs)
		{ #>
			public <#=item #>;
		<# } #>

		//[Header("Output variables")]
		<# foreach (var item in Outputs)
		{ #>
			public <#=item #> { get; private set; }
		<# } #>

		private BinaryManager _manager;

		public <#=ClassName#>()
		{
			_manager = new BinaryManager();
			_manager.LoadCommandsFrom(@"Assets\DulyAssets\Scripts\" + "<#=FilePath#>");
		}

		///<summary>
		/// Executes the Duly Behaviour by calling the created function.
		/// Updates Outputs accordingly.
		///</summary>
		public void Execute()
		{
			var results = new Dictionary<string, dynamic>();

			results = _manager.Controller.CallFunction(<#=FunctionId#>, new Dictionary<string, dynamic>{ <#=FunctionArguments#> });
			<# if (Outputs.Count > 0)
			{
				foreach (var output in Outputs)
				{
					var varName = output.Split(' ')[1]; #>
					<#=varName#> = results["<#=varName#>"];
				<# }
			} #>
		}
	}
}