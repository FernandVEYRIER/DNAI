<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@parameter type="System.String" name="parameter1" #>
using System;
using UnityEngine;
using UnityEngine.Events;
using CoreCommand;
using System.Collections.Generic;
using UnityEditorInternal;
using UnityEditor;
using Core.Plugin.Unity.Editor.Conditions.Inspector;
using Core.Plugin.Unity.Editor.Conditions;

namespace DNAI.<#=Namespace#>
{
	[Serializable]
	public class UnityEventOutputChange : UnityEvent<EventOutputChange>
	{
	}

	[System.Serializable]
    public class ConditionItem /*: ScriptableObject*/
    {
		[SerializeField]
        public ACondition cdt;
        public string Test;

        public static readonly string[] Outputs = new string[]
        {
			"No Output Selected",
			<# foreach (var item in Outputs)
			{ #>
				"<#=item#>",
				"DNAI.MoreOrLess.COMPARISON enum",
			<# } #>
        };

		public UnityEventOutputChange OnOutputChanged;
		public int CallbackCount = 0;

		private float drawSize = 0;

		public float ItemSize
        {
            get { return 110f + ((CallbackCount > 1) ? (CallbackCount - 1) * 45f : 0f) + drawSize; }
        }

		[SerializeField]
		private int _selectedIndex;

		public int SelectedIndex
		{
			get { return _selectedIndex; }
			set
			{
				if (value != _selectedIndex)
				{
					_selectedIndex = value;
					cdt.SetCurrentType(SelectedOutput.Split(' ')[0]);
					cdt.SetRefOutput(SelectedOutput[value]);
				}
			}
		}

		public string SelectedOutput { get { return Outputs[SelectedIndex]; } }

		public void Initialize()
		{
			cdt = new ACondition();
			cdt.SetCurrentType(SelectedOutput.Split(' ')[0]);
			
			<# foreach (var item in EnumNames)
			{#>
				cdt.RegisterEnum(typeof(<#=item#>).AssemblyQualifiedName);
			<# } #>
		}

		public float Draw(Rect rect)
		{
			//if (cdt != null)
			//if (cdt.CurrentType == null)
				//cdt.SetCurrentType(SelectedOutput.Split(' ')[0]);
			if (_selectedIndex > 0)
				drawSize = cdt.Draw(rect);
			return drawSize;
		}

		public bool Evaluate<T>(T value)
		{
			//if (cdt != null)
			if (_selectedIndex > 0)
				return cdt.Evaluate(value);
			return true;
		}
    }

	[CustomEditor(typeof(<#=ClassName#>), true)]
    public class ListExampleInspector : UnityEditor.Editor
    {
        private ReorderableList reorderableList;
		private int _selectedIndex;

        private <#=ClassName#> listExample
        {
            get
            {
                return target as <#=ClassName#>;
            }
        }

		private void OnEnable()
        {
            reorderableList = new ReorderableList(listExample._cdtList, typeof(ConditionItem), true, true, true, true);

            reorderableList.drawHeaderCallback += DrawHeader;
            reorderableList.drawElementCallback += DrawElement;

            reorderableList.onAddCallback += AddItem;
            reorderableList.onRemoveCallback += RemoveItem;

			reorderableList.elementHeightCallback += ElementHeightCallback;
        }

		private void OnDisable()
        {
            reorderableList.drawHeaderCallback -= DrawHeader;
            reorderableList.drawElementCallback -= DrawElement;

            reorderableList.onAddCallback -= AddItem;
            reorderableList.onRemoveCallback -= RemoveItem;

			reorderableList.elementHeightCallback -= ElementHeightCallback;
        }

        private void DrawHeader(Rect rect)
        {
            GUI.Label(rect, "Callbacks invoked when output changes");
        }

        private void DrawElement(Rect rect, int index, bool active, bool focused)
        {
            ConditionItem item = listExample._cdtList[index];
			Rect newRect = rect;

			//var s = serializedObject;
			//s.Update();

            EditorGUI.BeginChangeCheck();
			newRect.y += 20;
			newRect.x += 18;
            //item.Test = EditorGUI.TextField(new Rect(rect.x + 18, rect.y, rect.width - 18, rect.height), ConditionItem.Outputs[0].Item1);

			// Draws the condition item selector
			item.SelectedIndex = EditorGUI.Popup(new Rect(rect.x + 18, rect.y + 2, rect.width - 18, 20), item.SelectedIndex, ConditionItem.Outputs);

			newRect.y += item.Draw(newRect);

			// Draws the callback zone to assign it
			//SerializedObject s = new SerializedObject(listExample);
            var p = serializedObject.FindProperty("_cdtList").GetArrayElementAtIndex(index);
            //EditorGUI.PropertyField(new Rect(rect.x + 18, newRect.y + 5, rect.width - 18, 20), p.FindPropertyRelative("OnOutputChanged"));
            //var p = serializedObject.FindProperty("OnOutputChanged");
			//EditorGUIUtility.LookLikeControls();

			Debug.Log("p is => " + p);
            var it = p.serializedObject.GetIterator();
            p.Next(true);
            p.Next(false);
            p.Next(false);
            EditorGUI.PropertyField(new Rect(rect.x + 18, newRect.y + 5, rect.width - 18, 20), p);

			item.CallbackCount = item.OnOutputChanged.GetPersistentEventCount();
			//foreach (var x in p)
			//{
			//	var u = x as SerializedProperty;
			//	if (u.name == "size")
			//	{
			//		Debug.Log("found size " + u.intValue);
			//		item.CallbackCount = u.intValue;
			//		Repaint();
			//		break;
			//	}
			//}

            if (EditorGUI.EndChangeCheck())
            {
				//Debug.Log("end change check true");
                EditorUtility.SetDirty(target);
				Debug.Log("End change check !");
				Repaint();
            }
			//s.ApplyModifiedPropertiesWithoutUndo();
        }

        private void AddItem(ReorderableList list)
        {
			//var item = ScriptableObject.CreateInstance<ConditionItem>();
			var item = new ConditionItem();
			item.Initialize();
            listExample._cdtList.Add(item);

            EditorUtility.SetDirty(target);
        }

        private void RemoveItem(ReorderableList list)
        {
            listExample._cdtList.RemoveAt(list.index);

            EditorUtility.SetDirty(target);
        }
		
        private float ElementHeightCallback(int idx)
        {
            return listExample._cdtList[idx].ItemSize;
        }

        public override void OnInspectorGUI()
        {
			serializedObject.Update();
            base.OnInspectorGUI();
            reorderableList.DoLayoutList();
			serializedObject.ApplyModifiedPropertiesWithoutUndo();
        }
    }

	public class EventOutputChange : EventArgs
	{
		public <#=ClassName#> Invoker;
		public object Value;
		public Type ValueType;
	}

	<# foreach (var item in DataTypes)
	{#>
		public <#=item#>
	<# } #>

	///<summary>
	/// Base behaviour for DNAI IA.
	///</summary>
	public class <#=ClassName#> : MonoBehaviour
	{
		[HideInInspector]
	    public List<ConditionItem> _cdtList = new List<ConditionItem>();// { new ConditionItem() { cdt = new IntCondition() } };

		//[Serializable]
		//public class UnityEventOutputChange : UnityEvent<EventOutputChange>
		//{
		//}

		///<summary>
		/// Called when output values of the DNAI script change.
		///</summary>
		//public UnityEventOutputChange OnOutputChanged;

		//[Header("Input variables")]
		<# foreach (var item in Inputs)
		{ #>
			public <#=item #>;
		<# } #>

		//[Header("Output variables")]
		<# foreach (var item in Outputs)
		{ #>
			private <#=item.Split(' ')[0] #> _<#=item.Split(' ')[1] #>;
			public <#=item #>
			{
				get { return _<#=item.Split(' ')[1] #>; }
				private set
				{
					_<#=item.Split(' ')[1]#> = value;
					//OnOutputChanged.Invoke(new EventOutputChange { Value = value, ValueType = value.GetType(), Invoker = this });
					_cdtList.FindAll((x) => x.SelectedOutput == "<#=item#>").ForEach((y) =>
					{
						if (y.Evaluate(value))
							y.OnOutputChanged?.Invoke(new EventOutputChange { Value = value, ValueType = value.GetType(), Invoker = this });
					});
				}
			}
		<# } #>

		private BinaryManager _manager;

		public <#=ClassName#>()
		{
			_manager = new BinaryManager();
			_manager.LoadCommandsFrom(@"Assets/Standard Assets/DNAI/Scripts/" + "<#=FilePath#>");
		}

		///<summary>
		/// Executes the Duly Behaviour by calling the created function.
		/// Updates Outputs accordingly.
		///</summary>
		public void Execute()
		{
			var results = new Dictionary<string, dynamic>();

			results = _manager.Controller.CallFunction(<#=FunctionId#>, new Dictionary<string, dynamic>{ <#=FunctionArguments#> });
			<# if (Outputs.Count > 0)
			{
				foreach (var output in Outputs)
				{
					var varName = output.Split(' ')[1]; #>
					<#=varName#> = results["<#=varName#>"];
				<# }
			} #>
		}
	}	
}