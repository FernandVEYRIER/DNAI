<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@parameter type="System.String" name="parameter1" #>
using System;
using UnityEngine;
using UnityEngine.Events;
using CoreCommand;
using System.Collections.Generic;
using UnityEditorInternal;
using UnityEditor;
using Core.Plugin.Unity.Editor.Conditions.Inspector;
using Core.Plugin.Unity.Editor.Conditions;

namespace DNAI.<#=Namespace#>
{
	[System.Serializable]
    public class ConditionItem
    {
        public ACondition cdt;
        public string Test;

        public static readonly string[] Outputs = new string[]
        {
			<# foreach (var item in Outputs)
			{ #>
				"<#=item#>",
			<# } #>
        };
    }

	[CustomEditor(typeof(<#=ClassName#>), true)]
    public class ListExampleInspector : UnityEditor.Editor
    {
        private ReorderableList reorderableList;

        private <#=ClassName#> listExample
        {
            get
            {
                return target as <#=ClassName#>;
            }
        }

		private void OnEnable()
        {
            reorderableList = new ReorderableList(listExample._cdtList, typeof(ConditionItem), true, true, true, true);

            reorderableList.drawHeaderCallback += DrawHeader;
            reorderableList.drawElementCallback += DrawElement;

            reorderableList.onAddCallback += AddItem;
            reorderableList.onRemoveCallback += RemoveItem;
        }

		private void OnDisable()
        {
            reorderableList.drawHeaderCallback -= DrawHeader;
            reorderableList.drawElementCallback -= DrawElement;

            reorderableList.onAddCallback -= AddItem;
            reorderableList.onRemoveCallback -= RemoveItem;
        }

        private void DrawHeader(Rect rect)
        {
            GUI.Label(rect, "On Output Changed (EventOutputChanged)");
        }

        private void DrawElement(Rect rect, int index, bool active, bool focused)
        {
            ConditionItem item = listExample._cdtList[index];

            EditorGUI.BeginChangeCheck();
            //item.Test = EditorGUI.TextField(new Rect(rect.x + 18, rect.y, rect.width - 18, rect.height), ConditionItem.Outputs[0].Item1);
			EditorGUI.Popup(new Rect(rect.x + 18, rect.y + 2, rect.width - 18, rect.height), 0, ConditionItem.Outputs);
            if (EditorGUI.EndChangeCheck())
            {
                EditorUtility.SetDirty(target);
            }
        }

        private void AddItem(ReorderableList list)
        {
            listExample._cdtList.Add(new ConditionItem());

            EditorUtility.SetDirty(target);
        }

        private void RemoveItem(ReorderableList list)
        {
            listExample._cdtList.RemoveAt(list.index);

            EditorUtility.SetDirty(target);
        }

        public override void OnInspectorGUI()
        {
            base.OnInspectorGUI();
            reorderableList.DoLayoutList();
        }
    }

	public class EventOutputChange : EventArgs
	{
		public <#=ClassName#> Invoker;
		public object Value;
		public Type ValueType;
	}

	///<summary>
	/// Base behaviour for DNAI IA.
	///</summary>
	public class <#=ClassName#> : MonoBehaviour
	{
	    public List<ConditionItem> _cdtList = new List<ConditionItem>();// { new ConditionItem() { cdt = new IntCondition() } };

		[Serializable]
		public class UnityEventOutputChange : UnityEvent<EventOutputChange>
		{
		}

		///<summary>
		/// Called when output values of the DNAI script change.
		///</summary>
		public UnityEventOutputChange OnOutputChanged;

		<# foreach (var item in DataTypes)
		{#>
			public <#=item#>
		<# } #>

		//[Header("Input variables")]
		<# foreach (var item in Inputs)
		{ #>
			public <#=item #>;
		<# } #>

		//[Header("Output variables")]
		<# foreach (var item in Outputs)
		{ #>
			private <#=item.Split(' ')[0] #> _<#=item.Split(' ')[1] #>;
			public <#=item #>
			{
				get { return _<#=item.Split(' ')[1] #>; }
				private set
				{
					_<#=item.Split(' ')[1]#> = value;
					OnOutputChanged.Invoke(new EventOutputChange { Value = value, ValueType = value.GetType(), Invoker = this });
				}
			}
		<# } #>

		private BinaryManager _manager;

		public <#=ClassName#>()
		{
			_manager = new BinaryManager();
			_manager.LoadCommandsFrom(@"Assets/Standard Assets/DNAI/Scripts/" + "<#=FilePath#>");
		}

		///<summary>
		/// Executes the Duly Behaviour by calling the created function.
		/// Updates Outputs accordingly.
		///</summary>
		public void Execute()
		{
			var results = new Dictionary<string, dynamic>();

			results = _manager.Controller.CallFunction(<#=FunctionId#>, new Dictionary<string, dynamic>{ <#=FunctionArguments#> });
			<# if (Outputs.Count > 0)
			{
				foreach (var output in Outputs)
				{
					var varName = output.Split(' ')[1]; #>
					<#=varName#> = results["<#=varName#>"];
				<# }
			} #>
		}
	}	
}