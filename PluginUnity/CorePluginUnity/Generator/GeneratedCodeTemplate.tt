<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@parameter type="System.String" name="parameter1" #>
using System;
using UnityEngine;
using UnityEngine.Events;
using CoreCommand;
using System.Collections.Generic;
//using UnityEditorInternal;
//using UnityEditor;
//using Core.Plugin.Unity.Editor.Conditions.Inspector;
//using Core.Plugin.Unity.Editor.Conditions;
using Core.Plugin.Unity.Runtime;

namespace DNAI.<#=Namespace#>
{
	//namespace <#=ClassName#>
	//{
		///<summary>
		/// Base behaviour for DNAI IA.
		///</summary>
		public class <#=ClassName#> : DNAIScriptConditionRuntime
		{
			//[HideInInspector]
			//public List<ConditionItem> _cdtList = new List<ConditionItem>();// { new ConditionItem() { cdt = new IntCondition() } };

			<# foreach (var item in DataTypes)
			{#>
				<#=item#>
			<# } #>

			public static string[] OutputsAsStrings = new string[]
			{
				"No Output Selected",
				<# foreach (var item in Outputs)
				{#>
					"<#=item#>",
				<# } #>
			};

			public static string[] OutputsAsStringsQualified = new string[]
			{
				"void",
				<# foreach (var item in Outputs)
				{#>
					Type.GetType("<#=item.Split(' ')[0]#>").AssemblyQualifiedName,
				<# } #>
			};

			//[Serializable]
			//public class UnityEventOutputChange : UnityEvent<EventOutputChange>
			//{
			//}

			///<summary>
			/// Called when output values of the DNAI script change.
			///</summary>
			//public UnityEventOutputChange OnOutputChanged;

			//[Header("Input variables")]
			<# foreach (var item in Inputs)
			{ #>
				public <#=item #>;
			<# } #>

			//[Header("Output variables")]
			<# foreach (var item in Outputs)
			{ #>
				private <#=item.Split(' ')[0] #> _<#=item.Split(' ')[1] #>;
				public <#=item #>
				{
					get { return _<#=item.Split(' ')[1] #>; }
					private set
					{
						_<#=item.Split(' ')[1]#> = value;
						//OnOutputChanged.Invoke(new EventOutputChange { Value = value, ValueType = value.GetType(), Invoker = this });
						_cdtList.FindAll((x) => x.SelectedOutput == "<#=item#>").ForEach((y) =>
						{
							if (y.Evaluate(value) && y.OnOutputChanged != null)
								y.OnOutputChanged.Invoke(new EventOutputChange { Value = value, ValueType = value.GetType(), Invoker = this });
						});
					}
				}
			<# } #>

			private static readonly BinaryManager _manager = new BinaryManager();

			static <#=ClassName#>()
			{
				//_manager = new BinaryManager();
				_manager.LoadCommandsFrom(@"Assets/DNAI/Scripts/" + "<#=FilePath#>");
			}

			///<summary>
			/// Executes the Duly Behaviour by calling the created function.
			/// Updates Outputs accordingly.
			///</summary>
			<# foreach (var f in Functions)
			{ #>

				public void Execute<#=f.Name#>()
				{
					var results = new Dictionary<string, dynamic>();

					results = _manager.Controller.CallFunction(<#=f.FunctionId#>, new Dictionary<string, dynamic>{ <#=f.FunctionArguments#> });
					<# if (Outputs.Count > 0)
					{
						foreach (var output in Outputs)
						{
							var varName = output.Split(' ')[1]; #>
							if (results.ContainsKey("<#=varName#>"))
								<#=varName#> = Convert.ChangeType(results["<#=varName#>"], <#=varName#>.GetType());
						<# }
					} #>
				}
				
			<# } #>
		}
	//}
}